// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sector {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  country   String
  counters  Counter[]
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  @@unique([name, slug, country])
}

model Counter {
  id                           String     @id @default(cuid())
  symbol                       String
  name                         String
  slug                         String     @unique
  country                      String
  currency                     String
  totalBuyingCost              Decimal    @default(0) @db.Decimal(10, 3)
  totalRealizedRevenue         Decimal    @default(0) @db.Decimal(10, 3)
  totalRealizedGL              Decimal    @default(0) @db.Decimal(10, 3)
  absoluteRealizedGLPercentage Decimal    @default(0) @db.Decimal(10, 3)
  sector                       Sector     @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  sectorId                     String
  positions                    Position[]
  remarks                      String?
  updatedAt                    DateTime   @updatedAt
  createdAt                    DateTime   @default(now())

  @@unique([symbol, name, slug, country])
}

enum PositionStatus {
  open
  closed
}

model Position {
  id                           String                @id @default(cuid())
  quantityBought               Int
  quantityRemaining            Int
  status                       PositionStatus
  openedAt                     DateTime
  avgBuyPrice                  Decimal               @db.Decimal(10, 3)
  avgSellPrice                 Decimal?              @db.Decimal(10, 3)
  totalCost                    Decimal               @db.Decimal(10, 3)
  realizedGL                   Decimal               @default(0) @db.Decimal(10, 3)
  absoluteRealizedGLPercentage Decimal               @default(0) @db.Decimal(10, 3)
  counter                      Counter               @relation(fields: [counterId], references: [id], onDelete: Cascade)
  counterId                    String
  transactions                 PositionTransaction[]
  updatedAt                    DateTime              @updatedAt
  createdAt                    DateTime              @default(now())
}

enum TransactionAction {
  buy
  sell
}

model PositionTransaction {
  id              String            @id @default(cuid())
  action          TransactionAction
  unitPrice       Decimal           @db.Decimal(10, 3)
  quantity        Int
  totalPrice      Decimal           @db.Decimal(10, 3)
  position        Position          @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId      String
  transactionDate DateTime
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
}
